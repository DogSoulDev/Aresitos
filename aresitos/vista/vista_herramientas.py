
# -*- coding: utf-8 -*-
"""
PRINCIPIOS DE SEGURIDAD ARESITOS (NO MODIFICAR SIN AUDITOR√çA)
- Nunca solicitar ni almacenar la contrase√±a de root.
- Nunca mostrar, registrar ni filtrar la contrase√±a de root.
- Ning√∫n input de usuario debe usarse como comando sin validar.
- Todos los comandos pasan por el validador y gestor de permisos.
- Prohibido el uso de eval, exec, os.system, subprocess.Popen directo.
- Prohibido shell=True salvo justificaci√≥n y validaci√≥n exhaustiva.
- Si alg√∫n desarrollador necesita privilegios, usar solo gestor_permisos.
"""

import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import subprocess
from aresitos.utils.detector_sistema import es_kali_linux
from aresitos.utils.comandos_sistema import existe_comando
import threading
import logging
from typing import Optional, Any

try:
    from aresitos.vista.burp_theme import burp_theme
    from aresitos.utils.sudo_manager import get_sudo_manager, is_sudo_available
    BURP_THEME_AVAILABLE = True
except ImportError:
    BURP_THEME_AVAILABLE = False
    burp_theme = None

class VistaHerramientasKali(tk.Frame):
    """Vista para herramientas nativas de Kali Linux"""
    
    def __init__(self, parent, callback_completado=None):
        super().__init__(parent)

        # VERIFICACI√ìN CR√çTICA: Solo para Kali Linux
        if not es_kali_linux():
            messagebox.showerror(
                "Error - Solo Kali Linux", 
                "ARESITOS est√° dise√±ado exclusivamente para Kali Linux.\n\n"
                "Sistema detectado no es compatible.\n"
                "Instale Kali Linux para usar ARESITOS."
            )
            self.destroy()
            return

        self.controlador = None  # Patr√≥n MVC
        self.callback_completado = callback_completado
        self.proceso_activo = False
        self.logger = logging.getLogger(__name__)
        
        # Configurar tema
        if BURP_THEME_AVAILABLE and burp_theme:
            self.theme = burp_theme
            self.configure(bg=burp_theme.get_color('bg_primary'))
            self.colors = {
                'bg_primary': burp_theme.get_color('bg_primary'),
                'bg_secondary': burp_theme.get_color('bg_secondary'), 
                'fg_primary': burp_theme.get_color('fg_primary'),
                'fg_accent': burp_theme.get_color('fg_accent'),
                'button_bg': burp_theme.get_color('button_bg'),
                'success': burp_theme.get_color('success'),
                'warning': burp_theme.get_color('warning')
            }
        else:
            self.colors = {
                'bg_primary': '#2e2e2e',
                'bg_secondary': '#404040',
                'fg_primary': '#ffffff',
                'fg_accent': '#ff6633',
                'button_bg': '#007acc',
                'success': '#00ff00',
                'warning': '#ffaa00'
            }
            self.configure(bg=self.colors['bg_primary'])

        # Favicon robusto multiplataforma para la ventana principal de herramientas
        try:
            import os
            from tkinter import PhotoImage
            root = self.winfo_toplevel()
            # Ruta robusta y multiplataforma al icono, relativa al proyecto
            base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
            icon_path = os.path.join(base_dir, "recursos", "aresitos_icono.png")
            if os.path.exists(icon_path):
                self._icon_img = PhotoImage(file=icon_path)
                root.iconphoto(True, self._icon_img)
        except Exception as e:
            self.logger.warning(f"[WARN] No se pudo cargar el icono de ventana: {e}")

        self.crear_interfaz()
    
    def set_controlador(self, controlador: Optional[Any]):
        """Establecer controlador siguiendo patr√≥n MVC"""
        self.controlador = controlador
    
    def crear_interfaz(self):
        """Crear interfaz completa para herramientas Kali"""
        # Frame principal
        main_frame = tk.Frame(self, bg=self.colors['bg_primary'])
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Icono est√°ndar de Kali Linux (terminal)
        try:
            import os
            icon_path = '/usr/share/icons/Adwaita/48x48/apps/utilities-terminal.png'
            if os.path.exists(icon_path):
                self.logo_img = tk.PhotoImage(file=icon_path)
                logo_label = tk.Label(
                    main_frame,
                    image=self.logo_img,
                    bg=self.colors['bg_primary']
                )
                logo_label.pack(pady=(0, 10))
        except Exception:
            pass  # Continuar sin icono si hay problemas
        
        # T√≠tulo
        titulo_label = tk.Label(
            main_frame, 
            text="Configurador de Herramientas Kali",
            font=('Arial', 16, 'bold'),
            bg=self.colors['bg_primary'], 
            fg=self.colors['fg_accent']
        )
        titulo_label.pack(pady=(0, 20))
        
        # Subt√≠tulo informativo
        info_label = tk.Label(
            main_frame,
            text="Antes de arrancar el programa es recomendable instalar las herramientas que se usaran.",
            font=('Arial', 11),
            bg=self.colors['bg_primary'],
            fg=self.colors['fg_primary'],
            justify=tk.CENTER
        )
        info_label.pack(pady=(0, 30))
        
        # Frame de botones con distribuci√≥n uniforme
        botones_frame = tk.Frame(main_frame, bg=self.colors['bg_primary'])
        botones_frame.pack(fill="x", pady=(0, 20))
        
        # Configurar columnas con peso igual para distribuci√≥n uniforme
        for i in range(4):
            botones_frame.grid_columnconfigure(i, weight=1, uniform="botones")
        
        # Bot√≥n verificar herramientas
        self.btn_verificar = tk.Button(
            botones_frame,
            text="Verificar Herramientas",
            command=self.verificar_herramientas,
            bg=self.colors['button_bg'],
            fg='white',
            font=('Arial', 10, 'bold'),
            relief='flat',
            padx=15,
            pady=8,
            cursor='hand2'
        )
        self.btn_verificar.grid(row=0, column=0, padx=10, sticky="ew")
        
        # Bot√≥n mostrar optimizaciones
        self.btn_optimizaciones = tk.Button(
            botones_frame,
            text="Ver Optimizaciones",
            command=self.mostrar_optimizaciones,
            bg='#9C27B0',
            fg='white',
            font=('Arial', 10, 'bold'),
            relief='flat',
            padx=15,
            pady=8,
            cursor='hand2'
        )
        self.btn_optimizaciones.grid(row=0, column=1, padx=10, sticky="ew")
        
        # Bot√≥n instalar herramientas
        self.btn_instalar = tk.Button(
            botones_frame,
            text="Instalar Faltantes",
            command=self.instalar_herramientas,
            bg=self.colors['warning'],
            fg='white',
            font=('Arial', 10, 'bold'),
            relief='flat',
            padx=15,
            pady=8,
            cursor='hand2',
            state='disabled'
        )
        self.btn_instalar.grid(row=0, column=2, padx=10, sticky="ew")
        
        # Bot√≥n continuar (habilitado por defecto en modo desarrollo)
        self.btn_continuar = tk.Button(
            botones_frame,
            text="Continuar a ARESITOS",
            command=self.continuar_aplicacion,
            bg=self.colors['success'],
            fg='white',
            font=('Arial', 10, 'bold'),
            relief='flat',
            padx=15,
            pady=8,
            cursor='hand2',
            state='normal'  # Habilitado por defecto
        )
        self.btn_continuar.grid(row=0, column=3, padx=10, sticky="ew")
        
        # √Årea de resultados
        self.text_resultados = scrolledtext.ScrolledText(
            main_frame,
            height=20,
            width=80,
            bg=self.colors['bg_secondary'],
            fg=self.colors['fg_primary'],
            font=('Consolas', 10),
            insertbackground=self.colors['fg_accent'],
            relief='flat',
            bd=2
        )
        self.text_resultados.pack(fill="both", expand=True)
        
        # Mensaje inicial
        self.text_resultados.insert(tk.END, 
            "ARESITOS v3.0 - Configurador de Herramientas Escaneador Profesional\n" +
            "=" * 50 + "\n\n" +
            "Sistema optimizado para Kali Linux con comandos nativos integrados:\n\n" +
            "COMANDOS B√ÅSICOS:\n" +
            "‚Ä¢ Sistema: ps, ss, lsof, grep, awk, find, stat, lsmod, iptables\n" +
            "‚Ä¢ Red: nmap, netcat, ip, route, ss, hping3, curl, wget\n" +
            "‚Ä¢ Archivos: ls, chmod, chown, cat, sha256sum, md5sum\n\n" +
            "SEGURIDAD Y DETECCI√ìN:\n" +
            "‚Ä¢ Anti-rootkit: chkrootkit, rkhunter, lynis, unhide, tiger\n" +
            "‚Ä¢ Malware: clamav, yara, binwalk, strings, exiftool\n" +
            "‚Ä¢ Monitoreo: inotifywait, auditd, systemctl, pspy, aide\n" +
            "‚Ä¢ Firewall: iptables, fail2ban-client\n\n" +
            "AN√ÅLISIS FORENSE:\n" +
            "‚Ä¢ Forense: sleuthkit, foremost\n" +
            "‚Ä¢ Memoria: hexdump, strings, file, binwalk\n" +
            "‚Ä¢ Logs: journalctl, aureport, logwatch, rsyslog\n\n" +
            "üåê PENETRACI√ìN Y AUDITOR√çA:\n" +
            "‚Ä¢ Escaneadores: nmap, masscan, nuclei, nikto, gobuster, feroxbuster\n" +
            "‚Ä¢ Cracking: hashcat, john, hydra, medusa, patator, crunch\n" +
            "‚Ä¢ Web: sqlmap, whatweb, wfuzz, ffuf, dirb\n" +
            "‚Ä¢ Bases de datos: sqlite3, mysql, psql\n\n" +
            "üìÅ INTERFAZ Y VISUALIZACI√ìN:\n" +
            "‚Ä¢ Gestores: thunar, nautilus, dolphin, xdg-open\n" +
            "‚Ä¢ Editores: nano, vim, gedit, mousepad\n\n" +
            "Haga clic en 'Verificar Herramientas' para comprobar disponibilidad.\n" +
            "NOTA: Los comandos b√°sicos del sistema ya est√°n integrados.\n\n"
        )
        
        # Centrar ventana
        self.after(100, self._centrar_ventana)
    
    def _centrar_ventana(self):
        """Centrar la ventana en la pantalla"""
        try:
            # Obtener la ventana ra√≠z
            root = self.winfo_toplevel()
            root.update_idletasks()
            
            # Establecer tama√±o m√≠nimo m√°s grande para mostrar todos los botones
            root.minsize(1000, 700)
            
            # Obtener dimensiones
            width = max(1000, root.winfo_width())
            height = max(700, root.winfo_height())
            x = (root.winfo_screenwidth() // 2) - (width // 2)
            y = (root.winfo_screenheight() // 2) - (height // 2)
            
            # Establecer posici√≥n y tama√±o
            root.geometry(f"{width}x{height}+{x}+{y}")
            
            # Asegurar que sea redimensionable
            root.resizable(True, True)
            
        except Exception as e:
            self.logger.debug(f"Error centrando ventana: {e}")
    
    def mostrar_optimizaciones(self):
        """Mostrar todas las optimizaciones Kali Linux ya aplicadas"""
        self.text_resultados.delete(1.0, tk.END)
        
        optimizaciones_texto = """ARESITOS v2.0 - OPTIMIZACIONES KALI LINUX APLICADAS
=======================================================

OK SISTEMA COMPLETAMENTE OPTIMIZADO PARA KALI LINUX

VISTA DASHBOARD:
   ‚Ä¢ 15 comandos Linux avanzados integrados
   ‚Ä¢ ps aux --sort=-%cpu (procesos por CPU)
   ‚Ä¢ ip addr show (configuraci√≥n de red)
   ‚Ä¢ ss -tuln (conexiones activas)
   ‚Ä¢ lsof -i (archivos y procesos de red)
   ‚Ä¢ systemctl list-units (servicios del sistema)
   ‚Ä¢ free -h, df -h (memoria y disco)
   ‚Ä¢ uname -a (informaci√≥n del kernel)
   ‚Ä¢ who, last (usuarios conectados/historial)

VISTA ESCANEO:
   ‚Ä¢ Escaneo de red nativo con nmap integrado
   ‚Ä¢ An√°lisis de servicios con ss y lsof
   ‚Ä¢ Detecci√≥n de procesos de red
   ‚Ä¢ Monitoreo de servicios systemd
   ‚Ä¢ Reconnaissance avanzado con herramientas Kali

VISTA FIM (File Integrity Monitoring):
   ‚Ä¢ find para detecci√≥n de archivos modificados
   ‚Ä¢ stat para an√°lisis detallado de permisos
   ‚Ä¢ lsof para monitoreo de archivos abiertos
   ‚Ä¢ Detecci√≥n de binarios SUID
   ‚Ä¢ Verificaci√≥n de integridad con comandos nativos

VISTA SIEM (Security Information & Event Management):
   ‚Ä¢ grep avanzado para an√°lisis de logs
   ‚Ä¢ awk para procesamiento de registros
   ‚Ä¢ An√°lisis de patrones de seguridad
   ‚Ä¢ Correlaci√≥n de eventos con herramientas Linux
   ‚Ä¢ Detecci√≥n de anomal√≠as

VISTA MONITOREO:
   ‚Ä¢ Monitoreo en tiempo real con top y ps
   ‚Ä¢ An√°lisis de red con ss y netstat
   ‚Ä¢ Supervisi√≥n del sistema de archivos
   ‚Ä¢ Tracking de logins con last y who
   ‚Ä¢ Monitoreo de recursos del sistema

VISTA AUDITOR√çA:
   ‚Ä¢ Detecci√≥n avanzada de rootkits
   ‚Ä¢ Comparaci√≥n /proc vs ps para detecci√≥n
   ‚Ä¢ Verificaci√≥n de integridad de comandos
   ‚Ä¢ An√°lisis de m√≥dulos del kernel
   ‚Ä¢ Verificaci√≥n de procesos sospechosos

VISTA REPORTES:
   ‚Ä¢ An√°lisis de logs con herramientas Kali
   ‚Ä¢ Generaci√≥n de estad√≠sticas del sistema
   ‚Ä¢ Informes de seguridad automatizados
   ‚Ä¢ Comparaci√≥n de reportes con diff
   ‚Ä¢ An√°lisis forense de registros

VISTA GESTI√ìN DE DATOS:
   ‚Ä¢ An√°lisis de wordlists con grep, sort, uniq
   ‚Ä¢ Estad√≠sticas avanzadas con wc y awk
   ‚Ä¢ Procesamiento de diccionarios
   ‚Ä¢ Optimizaci√≥n de datos con herramientas Linux

INTEGRACI√ìN NATIVA:
   ‚Ä¢ 60+ comandos Linux nativos integrados
   ‚Ä¢ Subprocess optimizado para Kali
   ‚Ä¢ Threading para operaciones no bloqueantes
   ‚Ä¢ Manejo robusto de errores
   ‚Ä¢ Logging integrado al terminal

HERRAMIENTAS PRINCIPALES DEL ESCANEADOR PROFESIONAL v3.0:
   ‚Ä¢ CORE: nmap (scripts NSE), masscan (escaneo masivo), gobuster (directorios)
   ‚Ä¢ AVANZADAS: rustscan (velocidad), nuclei (CVE), ffuf (fuzzing), feroxbuster (recursivo)
   ‚Ä¢ AN√ÅLISIS: strings, hexdump, binwalk, sleuthkit, yara
   ‚Ä¢ SEGURIDAD: chkrootkit, rkhunter, auditd, fail2ban, lynis
   ‚Ä¢ RED: ip, route, netstat, netcat, tcpdump, wireshark

BENEFICIOS DEL ESCANEADOR PROFESIONAL v3.0:
   ‚Ä¢ Rendimiento optimizado para Kali Linux 2025
   ‚Ä¢ Integraci√≥n nativa con herramientas de escaneado modernas  
   ‚Ä¢ Detecci√≥n autom√°tica de vulnerabilidades CVE actualizadas
   ‚Ä¢ Enumeraci√≥n web avanzada con m√∫ltiples m√©todos
   ‚Ä¢ Fallback inteligente seg√∫n herramientas disponibles
   ‚Ä¢ Exportaci√≥n profesional de resultados de escaneo

OK ESTADO: ESCANEADOR PROFESIONAL v3.0 OPTIMIZADO
LISTO PARA: Escaneos de vulnerabilidades en entornos Kali Linux 2025

"""
        
        self.text_resultados.insert(tk.END, optimizaciones_texto)
        self.text_resultados.see(tk.END)
        
        self._log_terminal("Optimizaciones Kali Linux mostradas", "HERRAMIENTAS_KALI", "INFO")
    
    def verificar_herramientas(self):
        """Verificar herramientas de Kali Linux disponibles"""
        if self.proceso_activo:
            return
        
        self.proceso_activo = True
        try:
            if hasattr(self, 'btn_verificar') and self.btn_verificar.winfo_exists():
                self.btn_verificar.config(state='disabled')
            if hasattr(self, 'text_resultados') and self.text_resultados.winfo_exists():
                self.text_resultados.delete(1.0, tk.END)
        except (tk.TclError, AttributeError):
            pass
        
        # Ejecutar verificaci√≥n en thread separado
        thread = threading.Thread(target=self._verificar_herramientas_async)
        thread.daemon = True
        thread.start()
    
    def _verificar_herramientas_async(self):
        """Verificaci√≥n as√≠ncrona de herramientas con check visual"""
        try:
            self.after(0, self._actualizar_texto, "Verificando herramientas de Kali Linux...\n\n")

            # Lista de herramientas esenciales modernizadas para Kali 2025
            herramientas = [
                # Herramientas robustas, apt-installables y recomendadas para ARESITOS v3.0
                # Escaneo profesional
                'nmap', 'masscan', 'rustscan', 'nuclei', 'ffuf', 'feroxbuster', 'nikto', 'whatweb', 'dirb', 'gobuster',
                # Forense y an√°lisis
                'sleuthkit', 'tsk_recover', 'tsk_loaddb', 'tsk_gettimes', 'tsk_comparedir', 'tsk_imageinfo',
                'testdisk', 'plaso', 'bulk-extractor', 'hashdeep', 'dc3dd', 'guymager', 'foremost', 'binwalk', 'exiftool', 'yara',
                # Seguridad y auditor√≠a
                'clamav', 'clamav-daemon', 'chkrootkit', 'rkhunter', 'lynis', 'auditd', 'aide', 'debsums', 'rsyslog', 'logrotate', 'logwatch',
                # An√°lisis avanzado y red
                'tcpdump', 'wireshark', 'tshark', 'strace', 'ltrace', 'gdb', 'osquery', 'file', 'hexdump',
                # Utilidades del sistema
                'ps', 'ss', 'lsof', 'netstat', 'top', 'free', 'df', 'uname', 'who', 'last',
                'find', 'stat', 'grep', 'awk', 'sort', 'uniq', 'wc', 'tail', 'head',
                'systemctl', 'ip', 'route', 'wget', 'curl', 'diff', 'ls', 'chmod', 'chown',
                'lsmod', 'kill', 'pgrep', 'pkill', 'sha256sum', 'md5sum', 'sha1sum', 'sha512sum',
                'iptables', 'cat', 'less', 'more', 'pwd', 'mkdir', 'rm', 'cp', 'mv',
                # Editores y gestores
                'nano', 'vim', 'vi', 'gedit', 'mousepad',
                'thunar', 'nautilus', 'dolphin', 'xdg-open',
                # Herramientas base de verificaci√≥n
                'which', 'whereis', 'type', 'command'
            ]

            herramientas_faltantes = []
            herramientas_ok = []

            # Unicode: check verde = \u2705, cruz roja = \u274C (pero mejor usar \u2714 y \u2716 para compatibilidad)
            check = '\u2714'  # ‚úì
            cruz = '\u2716'   # ‚úñ

            for herramienta in herramientas:
                try:
                    if existe_comando(herramienta):
                        herramientas_ok.append(herramienta)
                        # Check verde
                        self.after(0, self._actualizar_texto_coloreado, f" {check} {herramienta}\n", 'ok')
                    else:
                        herramientas_faltantes.append(herramienta)
                        # Cruz roja
                        self.after(0, self._actualizar_texto_coloreado, f" {cruz} {herramienta}\n", 'error')
                except Exception as e:
                    herramientas_faltantes.append(herramienta)
                    self.after(0, self._actualizar_texto_coloreado, f" {cruz} {herramienta} (ERROR: {e})\n", 'error')

            # Mostrar resumen
            self.after(0, self._mostrar_resumen_verificacion, herramientas_ok, herramientas_faltantes)

        except Exception as e:
            self.after(0, self._actualizar_texto, f"\nError durante la verificaci√≥n: {e}\n")
        finally:
            self.after(0, self._finalizar_verificacion)

    def _actualizar_texto_coloreado(self, texto, tipo):
        """Insertar texto coloreado (verde/rojo) en el √°rea de resultados."""
        try:
            if hasattr(self, 'text_resultados') and self.text_resultados.winfo_exists():
                if tipo == 'ok':
                    self.text_resultados.insert(tk.END, texto, 'ok')
                elif tipo == 'error':
                    self.text_resultados.insert(tk.END, texto, 'error')
                else:
                    self.text_resultados.insert(tk.END, texto)
                self.text_resultados.see(tk.END)
                self.text_resultados.update()
                # Configurar tags solo una vez
                if not hasattr(self, '_tags_configurados'):
                    self.text_resultados.tag_configure('ok', foreground='#00cc44', font=('Consolas', 10, 'bold'))
                    self.text_resultados.tag_configure('error', foreground='#ff3333', font=('Consolas', 10, 'bold'))
                    self._tags_configurados = True
        except (tk.TclError, AttributeError):
            pass
    
    def _mostrar_resumen_verificacion(self, herramientas_ok, herramientas_faltantes):
        """Mostrar resumen de la verificaci√≥n"""
        self._actualizar_texto(f"\n{'='*50}\n")
        self._actualizar_texto(f"RESUMEN DE VERIFICACI√ìN\n")
        self._actualizar_texto(f"{'='*50}\n\n")
        self._actualizar_texto(f"Herramientas encontradas: {len(herramientas_ok)}\n")
        self._actualizar_texto(f"Herramientas faltantes: {len(herramientas_faltantes)}\n\n")
        
        if herramientas_faltantes:
            self._actualizar_texto("HERRAMIENTAS FALTANTES:\n")
            for herramienta in herramientas_faltantes:
                self._actualizar_texto(f"  ‚Ä¢ {herramienta}\n")
            self._actualizar_texto("\nHaga clic en 'Instalar Herramientas Faltantes' para instalarlas.\n")
            try:
                if hasattr(self, 'btn_instalar') and self.btn_instalar.winfo_exists():
                    self.btn_instalar.config(state='normal')
            except (tk.TclError, AttributeError):
                pass
        else:
            self._actualizar_texto("¬°Todas las herramientas est√°n disponibles!\n")
            try:
                if hasattr(self, 'btn_continuar') and self.btn_continuar.winfo_exists():
                    self.btn_continuar.config(state='normal')
            except (tk.TclError, AttributeError):
                pass
    
    def _actualizar_texto(self, texto):
        """Actualizar texto en el √°rea de resultados con verificaci√≥n de seguridad"""
        try:
            # Verificar si el widget a√∫n existe y la ventana no ha sido destruida
            if hasattr(self, 'text_resultados') and self.text_resultados.winfo_exists():
                self.text_resultados.insert(tk.END, texto)
                self.text_resultados.see(tk.END)
                self.text_resultados.update()
        except (tk.TclError, AttributeError):
            # Widget ya destruido, ignorar silenciosamente
            pass
    
    def _finalizar_verificacion(self):
        """Finalizar proceso de verificaci√≥n con verificaci√≥n de seguridad"""
        try:
            self.proceso_activo = False
            # Verificar si el widget a√∫n existe y la ventana no ha sido destruida
            if hasattr(self, 'btn_verificar') and self.btn_verificar.winfo_exists():
                self.btn_verificar.config(state='normal')
        except (tk.TclError, AttributeError):
            # Widget ya destruido, ignorar silenciosamente
            self.proceso_activo = False
    
    def instalar_herramientas(self):
        """Instalar herramientas faltantes"""
        if self.proceso_activo:
            return
        
        respuesta = messagebox.askyesno(
            "Instalar Herramientas",
            "¬øDesea instalar las herramientas faltantes?\n\n" +
            "Esto ejecutar√°: sudo apt update && sudo apt install -y [herramientas]\n\n" +
            "Nota: Se requieren permisos de administrador."
        )
        
        if not respuesta:
            return
        
        self.proceso_activo = True
        try:
            if hasattr(self, 'btn_instalar') and self.btn_instalar.winfo_exists():
                self.btn_instalar.config(state='disabled')
            if hasattr(self, 'text_resultados') and self.text_resultados.winfo_exists():
                self.text_resultados.delete(1.0, tk.END)
        except (tk.TclError, AttributeError):
            pass
        
        # Ejecutar instalaci√≥n en thread separado
        thread = threading.Thread(target=self._instalar_herramientas_async)
        thread.daemon = True
        thread.start()
    
    def _instalar_herramientas_async(self):
        """Instalaci√≥n as√≠ncrona de herramientas usando SudoManager"""
        try:
            self.after(0, self._actualizar_texto, "Instalando herramientas de Kali Linux...\n\n")
            
            # Verificar que sudo est√© disponible
            sudo_manager = get_sudo_manager()
            if not is_sudo_available():
                self.after(0, self._actualizar_texto, "ERROR: No hay permisos sudo disponibles\n")
                self.after(0, self._actualizar_texto, "Reinicie ARESITOS e ingrese la contrase√±a correcta\n")
                return
            
            # Lista de paquetes disponibles en repositorios APT de Kali
            paquetes = [
                # Comandos b√°sicos del sistema (ya incluidos en Kali por defecto)
                'procps', 'iproute2', 'net-tools', 'util-linux', 'findutils', 'grep', 'gawk',
                'coreutils', 'systemd', 'wget', 'curl', 'diffutils',
                # Herramientas de monitoreo y an√°lisis sistema (FASE 3.2 y 3.3)
                'inotify-tools', 'chkrootkit', 'rkhunter', 'lynis', 'auditd', 'debsums',
                'rsyslog', 'logrotate', 'logwatch',
                # Escaneadores b√°sicos (FASE 3.1 - Escaneador Expandido)
                'nmap', 'masscan', 'nikto', 'gobuster', 'feroxbuster', 'dirb',
                # Servicios de red (FASE 3.1)
                'netcat-traditional', 'whatweb', 'wfuzz', 'ffuf',
                # Cracking y passwords
                'hashcat', 'john', 'hydra', 'medusa', 'patator',
                # An√°lisis SQL
                'sqlmap', 'sqlninja',
                # Cuarentena y malware (FASE 3.3 - FIM expandido)
                'clamav', 'clamav-daemon', 'clamav-freshclam', 'yara', 'binwalk', 'exiftool',
                'foremost', 'sleuthkit', 'autopsy',
                'testdisk', 'photorec', 'plaso', 'bulk-extractor', 'hashdeep', 'dc3dd', 'guymager',
                'tsk_recover', 'tsk_loaddb', 'tsk_gettimes', 'tsk_comparedir', 'tsk_imageinfo',
                # SIEM y auditor√≠a (FASE 3.2)
                'fail2ban', 'aide', 'tripwire', 'samhain',
                # Herramientas de an√°lisis avanzado (FASE 3)
                'tcpdump', 'wireshark', 'tshark', 'strace', 'ltrace', 'gdb',
                'osquery', 'file', 'hexdump'
            ]
            
                        # Lista de herramientas esenciales para Kali Linux (ELIMINADOS: sqlninja, volatility3)
            paquetes = [
                # Escaneo de red (actualizado FASE 3.1)
                'nmap', 'masscan', 'nikto', 'gobuster', 'feroxbuster', 'dirb',
                # Servicios de red (FASE 3.1)
                'netcat-traditional', 'whatweb', 'wfuzz', 'ffuf',
                # Cracking y passwords
                'hashcat', 'john', 'hydra', 'medusa', 'patator',
                # An√°lisis SQL
                'sqlmap',
                # Cuarentena y malware (FASE 3.3 - FIM expandido)
                'clamav', 'clamav-daemon', 'clamav-freshclam', 'yara', 'binwalk', 'exiftool',
                'foremost', 'sleuthkit', 'autopsy',
                # SIEM y auditor√≠a (FASE 3.2) - REMOVIDOS PROBLEM√ÅTICOS
                'fail2ban', 'aide',
                # Herramientas de an√°lisis avanzado (FASE 3)
                'tcpdump', 'wireshark', 'tshark', 'strace', 'ltrace', 'gdb',
                'osquery', 'file', 'hexdump'
            ]
            
            # Herramientas problem√°ticas que requieren instalaci√≥n manual especial
            herramientas_problematicas = {
                'tripwire': {
                    'razon': 'Requiere configuraci√≥n interactiva y puede tardar +10 minutos',
                    'comando': 'sudo apt install tripwire',
                    'notas': 'Configurar√° autom√°ticamente durante instalaci√≥n. Responder prompts.'
                },
                'samhain': {
                    'razon': 'Configuraci√≥n compleja y dependencias especiales',
                    'comando': 'sudo apt install samhain',
                    'notas': 'Herramienta de integridad avanzada. Configuraci√≥n manual requerida.'
                },
                'sqlninja': {
                    'razon': 'Paquete obsoleto en Kali Linux 2025',
                    'comando': 'Usar sqlmap como alternativa',
                    'notas': 'sqlninja no est√° disponible en repositorios actuales'
                },
                'volatility3': {
                    'razon': 'Instalaci√≥n v√≠a pip, no APT',
                    'comando': 'pip3 install volatility3',
                    'notas': 'Herramienta de an√°lisis de memoria forense'
                }
            }
            
            # Herramientas que requieren instalaci√≥n manual (se informar√° al usuario):
            herramientas_manuales = [
                'testdisk: apt install testdisk',
                'photorec: apt install testdisk',
                'plaso: apt install plaso',
                'bulk-extractor: apt install bulk-extractor',
                'hashdeep: apt install hashdeep',
                'dc3dd: apt install dc3dd',
                'guymager: apt install guymager',
                'tsk_recover: apt install sleuthkit',
                'tsk_loaddb: apt install sleuthkit',
                'tsk_gettimes: apt install sleuthkit',
                'tsk_comparedir: apt install sleuthkit',
                'tsk_imageinfo: apt install sleuthkit',
                'rustscan: cargo install rustscan (requiere Rust)',
                'httpx: go install github.com/projectdiscovery/httpx/cmd/httpx@latest (requiere Go)',
                'nuclei: go install github.com/projectdiscovery/nuclei/v2/cmd/nuclei@latest (requiere Go)',
                'linpeas: wget https://github.com/carlospolop/PEASS-ng/releases/latest/download/linpeas.sh',
                'pspy64: wget https://github.com/DominicBreuker/pspy/releases/latest/download/pspy64',
                'pspy32: wget https://github.com/DominicBreuker/pspy/releases/latest/download/pspy32',
                'dirbuster: Ya incluido en Kali en /usr/share/dirbuster/',
                'strings: Parte del paquete binutils (generalmente ya instalado)'
            ]
            
            # Actualizar repositorios usando SudoManager
            self.after(0, self._actualizar_texto, "Actualizando repositorios...\n")
            result = sudo_manager.execute_sudo_command('apt update', timeout=120)
            
            if result.returncode == 0:
                self.after(0, self._actualizar_texto, "OK Repositorios actualizados\n\n")
            else:
                self.after(0, self._actualizar_texto, f"ERROR actualizando repositorios: {result.stderr}\n\n")
            
            # Instalar paquetes uno por uno para mejor control de errores
            self.after(0, self._actualizar_texto, "Instalando herramientas...\n")
            
            paquetes_exitosos = []
            paquetes_fallidos = []
            
            for paquete in paquetes:
                try:
                    self.after(0, self._actualizar_texto, f"Instalando {paquete}...\n")
                    
                    # Usar SudoManager en lugar de sudo directo
                    result = sudo_manager.execute_sudo_command(f'apt install -y {paquete}', timeout=120)
                    
                    if result.returncode == 0:
                        paquetes_exitosos.append(paquete)
                        self.after(0, self._actualizar_texto, f"OK {paquete} instalado correctamente\n")
                    else:
                        paquetes_fallidos.append(paquete)
                        error_msg = result.stderr.strip()
                        
                        # Identificar errores comunes y dar instrucciones espec√≠ficas
                        if "Unable to locate package" in error_msg or "E: Package" in error_msg:
                            self.after(0, self._actualizar_texto, f"ERROR instalando {paquete}: Paquete no encontrado en repositorios\n")
                            self.after(0, self._actualizar_texto, f"  SOLUCI√ìN: Instale manualmente con: sudo apt update && sudo apt install {paquete}\n")
                            self.after(0, self._actualizar_texto, f"  ALTERNATIVA: Busque en: https://kali.org/tools/ para instalaci√≥n alternativa\n")
                        elif "WARNING: apt does not have a stable CLI interface" in error_msg:
                            self.after(0, self._actualizar_texto, f"WARNING {paquete}: Advertencia de compatibilidad APT (no es error cr√≠tico)\n")
                            self.after(0, self._actualizar_texto, f"  SOLUCI√ìN: Instale manualmente con: sudo apt install {paquete}\n")
                        elif "externally-managed-environment" in error_msg:
                            self.after(0, self._actualizar_texto, f"ERROR instalando {paquete}: Entorno Python gestionado externamente\n")
                            self.after(0, self._actualizar_texto, f"  SOLUCI√ìN: Instale con pipx: pipx install {paquete}\n")
                            self.after(0, self._actualizar_texto, f"  ALTERNATIVA: python3 -m pip install --user {paquete} --break-system-packages\n")
                        else:
                            self.after(0, self._actualizar_texto, f"ERROR instalando {paquete}: {error_msg[:100]}...\n")
                            self.after(0, self._actualizar_texto, f"  SOLUCI√ìN: Instale manualmente con: sudo apt install {paquete}\n")
                            self.after(0, self._actualizar_texto, f"  DOCUMENTACI√ìN: Consulte documentaci√≥n espec√≠fica de la herramienta\n")
                        
                except subprocess.TimeoutExpired:
                    paquetes_fallidos.append(paquete)
                    self.after(0, self._actualizar_texto, f"TIMEOUT instalando {paquete}\n")
                    self.after(0, self._actualizar_texto, f"  SOLUCI√ìN: Instale manualmente con m√°s tiempo: sudo apt install {paquete}\n")
                    self.after(0, self._actualizar_texto, f"  NOTA: Puede requerir descargas grandes o dependencias complejas\n")
                except Exception as e:
                    paquetes_fallidos.append(paquete)
                    self.after(0, self._actualizar_texto, f"ERROR instalando {paquete}: {str(e)[:100]}...\n")
                    self.after(0, self._actualizar_texto, f"  SOLUCI√ìN: Revise permisos e instale manualmente: sudo apt install {paquete}\n")
                    self.after(0, self._actualizar_texto, f"  VERIFICACI√ìN: Verifique conectividad y repositorios actualizados\n")
            
            # Mostrar resumen
            self.after(0, self._actualizar_texto, f"\n{'='*50}\n")
            self.after(0, self._actualizar_texto, f"RESUMEN DE INSTALACI√ìN\n")
            self.after(0, self._actualizar_texto, f"{'='*50}\n")
            self.after(0, self._actualizar_texto, f"OK Instalados correctamente: {len(paquetes_exitosos)}\n")
            self.after(0, self._actualizar_texto, f"ERROR Errores de instalaci√≥n: {len(paquetes_fallidos)}\n\n")
            
            if paquetes_fallidos:
                self.after(0, self._actualizar_texto, f"HERRAMIENTAS QUE REQUIEREN INSTALACI√ìN MANUAL:\n")
                for paquete in paquetes_fallidos:
                    self.after(0, self._actualizar_texto, f"   ‚Ä¢ {paquete}\n")
                self.after(0, self._actualizar_texto, f"\nCOMANDOS PARA INSTALACI√ìN MANUAL:\n")
                self.after(0, self._actualizar_texto, f"sudo apt update\n")
                for paquete in paquetes_fallidos:
                    self.after(0, self._actualizar_texto, f"sudo apt install {paquete}\n")
                self.after(0, self._actualizar_texto, f"\nRECURSOS ADICIONALES:\n")
                self.after(0, self._actualizar_texto, f"‚Ä¢ Kali Tools: https://kali.org/tools/\n")
                self.after(0, self._actualizar_texto, f"‚Ä¢ Documentation: https://kali.org/docs/\n")
                self.after(0, self._actualizar_texto, f"‚Ä¢ Forum Support: https://forums.kali.org/\n")
            
            if paquetes_fallidos:
                self.after(0, self._actualizar_texto, "PAQUETES CON ERRORES:\n")
                for paquete in paquetes_fallidos:
                    self.after(0, self._actualizar_texto, f"  ‚Ä¢ {paquete}\n")
                self.after(0, self._actualizar_texto, "\nEstos paquetes pueden no estar disponibles en este sistema.\n")
            
            # Considerar exitoso si al menos el 70% se instal√≥
            if len(paquetes_exitosos) >= len(paquetes) * 0.7:
                self.after(0, self._actualizar_texto, "\nOK Instalaci√≥n completada exitosamente\n")
                
                # Mostrar informaci√≥n sobre herramientas problem√°ticas
                self.after(0, self._actualizar_texto, "\n" + "="*60 + "\n")
                self.after(0, self._actualizar_texto, "HERRAMIENTAS ESPECIALES - INSTALACI√ìN MANUAL\n")
                self.after(0, self._actualizar_texto, "="*60 + "\n")
                self.after(0, self._actualizar_texto, "Las siguientes herramientas requieren instalaci√≥n manual especial:\n\n")
                
                for herramienta, info in herramientas_problematicas.items():
                    self.after(0, self._actualizar_texto, f"HERRAMIENTA {herramienta.upper()}:\n")
                    self.after(0, self._actualizar_texto, f"   Raz√≥n: {info['razon']}\n")
                    self.after(0, self._actualizar_texto, f"   Comando: {info['comando']}\n")
                    self.after(0, self._actualizar_texto, f"   Notas: {info['notas']}\n\n")
                
                # Mostrar informaci√≥n sobre herramientas de la FASE 3
                self.after(0, self._actualizar_texto, "\n" + "="*60 + "\n")
                self.after(0, self._actualizar_texto, "HERRAMIENTAS FASE 3 - EXPANSIONES AVANZADAS\n")
                self.after(0, self._actualizar_texto, "="*60 + "\n")
                self.after(0, self._actualizar_texto, "ESCANEADOR EXPANDIDO (Fase 3.1):\n")
                self.after(0, self._actualizar_texto, "   ‚Ä¢ nmap, masscan, rustscan (escaneo de red)\n")
                self.after(0, self._actualizar_texto, "   ‚Ä¢ nikto, whatweb (an√°lisis web)\n")
                self.after(0, self._actualizar_texto, "   ‚Ä¢ chkrootkit, rkhunter (detecci√≥n rootkits)\n")
                self.after(0, self._actualizar_texto, "   ‚Ä¢ binwalk, strings (an√°lisis forense)\n")
                self.after(0, self._actualizar_texto, "   ‚Ä¢ clamav (antivirus integrado)\n\n")
                
                self.after(0, self._actualizar_texto, "SIEM AVANZADO (Fase 3.2):\n")
                self.after(0, self._actualizar_texto, "   ‚Ä¢ auditd, rsyslog (auditor√≠a y logs)\n")
                self.after(0, self._actualizar_texto, "   ‚Ä¢ fail2ban (protecci√≥n contra fuerza bruta)\n")
                self.after(0, self._actualizar_texto, "   ‚Ä¢ logwatch (an√°lisis de logs)\n")
                self.after(0, self._actualizar_texto, "   ‚Ä¢ tcpdump, wireshark (an√°lisis de red)\n\n")
                
                self.after(0, self._actualizar_texto, "FIM OPTIMIZADO (Fase 3.3):\n")
                self.after(0, self._actualizar_texto, "   ‚Ä¢ inotify-tools (monitoreo tiempo real)\n")
                self.after(0, self._actualizar_texto, "   ‚Ä¢ aide (integridad archivos)\n")
                self.after(0, self._actualizar_texto, "   ‚Ä¢ debsums (verificaci√≥n checksums)\n")
                self.after(0, self._actualizar_texto, "   ‚Ä¢ sleuthkit, autopsy (an√°lisis forense)\n\n")
                
                # Mostrar informaci√≥n sobre herramientas de instalaci√≥n manual
                self.after(0, self._actualizar_texto, "=" * 60 + "\n")
                self.after(0, self._actualizar_texto, "HERRAMIENTAS DE INSTALACI√ìN MANUAL\n")
                self.after(0, self._actualizar_texto, "="*60 + "\n")
                for herramienta in herramientas_manuales:
                    self.after(0, self._actualizar_texto, f"ÔøΩ {herramienta}\n")
                self.after(0, self._actualizar_texto, "\nEstas herramientas se pueden instalar manualmente\n")
                self.after(0, self._actualizar_texto, "para funcionalidades espec√≠ficas adicionales.\n")
                self.after(0, self._actualizar_texto, "\nNOTA: Las capacidades avanzadas de la Fase 3 funcionan\n")
                self.after(0, self._actualizar_texto, "   con las herramientas instaladas autom√°ticamente.\n")
                
                self.after(0, self._habilitar_continuar)
            else:
                self.after(0, self._actualizar_texto, f"\nERROR Instalaci√≥n con muchos errores ({len(paquetes_fallidos)}/{len(paquetes)} fallaron)\n")
                self.after(0, self._actualizar_texto, "Recomendaci√≥n: Verificar conexi√≥n y repositorios\n")
                
        except subprocess.TimeoutExpired:
            self.after(0, self._actualizar_texto, "\nTIMEOUT durante la instalaci√≥n\n")
        except Exception as e:
            self.after(0, self._actualizar_texto, f"\nERROR: {e}\n")
        finally:
            self.after(0, self._finalizar_instalacion)
    
    def _habilitar_continuar(self):
        """Habilitar bot√≥n de continuar con verificaci√≥n de seguridad"""
        try:
            # Verificar si el widget a√∫n existe y la ventana no ha sido destruida
            if hasattr(self, 'btn_continuar') and self.btn_continuar.winfo_exists():
                self.btn_continuar.config(state='normal')
        except (tk.TclError, AttributeError):
            # Widget ya destruido, ignorar silenciosamente
            pass
    
    def _finalizar_instalacion(self):
        """Finalizar proceso de instalaci√≥n con verificaci√≥n de seguridad"""
        try:
            self.proceso_activo = False
            # Verificar si el widget a√∫n existe y la ventana no ha sido destruida
            if hasattr(self, 'btn_instalar') and self.btn_instalar.winfo_exists():
                self.btn_instalar.config(state='normal')
        except (tk.TclError, AttributeError):
            # Widget ya destruido, ignorar silenciosamente
            self.proceso_activo = False
    
    def continuar_aplicacion(self):
        """Continuar a la aplicaci√≥n principal con verificaci√≥n de seguridad"""
        try:
            # Verificar si los widgets a√∫n existen antes de acceder a ellos
            if not (hasattr(self, 'text_resultados') and self.text_resultados.winfo_exists()):
                return
                
            self.text_resultados.insert(tk.END, "\nIniciando ARESITOS v2.0...\n")
            self.text_resultados.insert(tk.END, "Herramientas modernas configuradas correctamente\n")
            self.text_resultados.insert(tk.END, "Tema Burp Suite aplicado\n")
            self.text_resultados.insert(tk.END, "Dashboard completo cargado\n")
            self.text_resultados.see(tk.END)
            
            # Deshabilitar bot√≥n para evitar clicks m√∫ltiples
            if hasattr(self, 'btn_continuar') and self.btn_continuar.winfo_exists():
                self.btn_continuar.config(state='disabled', text="Iniciando...")
            
            # Ejecutar callback si est√° disponible
            if self.callback_completado:
                if hasattr(self, 'text_resultados') and self.text_resultados.winfo_exists():
                    self.text_resultados.insert(tk.END, "\nAbriendo aplicaci√≥n principal...\n")
                    self.text_resultados.see(tk.END)
                # Usar after para ejecutar el callback en el hilo principal
                self.after(1500, self._ejecutar_callback_seguro)
            else:
                messagebox.showinfo("Informaci√≥n", 
                                  "Configuraci√≥n completada exitosamente.\n"
                                  "ARESITOS v2.0 se iniciar√° autom√°ticamente.")
                # Si no hay callback, cerrar esta ventana
                self.after(2000, self._cerrar_ventana_seguro)
        except (tk.TclError, AttributeError):
            # Widget ya destruido, ignorar silenciosamente
            pass
    
    def _ejecutar_callback_seguro(self):
        """Ejecutar callback de forma segura"""
        try:
            if self.callback_completado:
                self.callback_completado()
        except Exception:
            # Error al ejecutar callback, ignorar
            pass
    
    def _cerrar_ventana_seguro(self):
        """Cerrar ventana de forma segura"""
        try:
            if hasattr(self, 'master') and self.master.winfo_exists():
                self.master.destroy()
        except (tk.TclError, AttributeError):
            # Ventana ya destruida, ignorar
            pass
    
    def _log_terminal(self, mensaje, modulo="HERRAMIENTAS_KALI", nivel="INFO"):
        """Log al terminal integrado de manera segura."""
        try:
            # Importar terminal global
            from aresitos.vista.vista_dashboard import VistaDashboard
            if hasattr(VistaDashboard, '_terminal_widget') and VistaDashboard._terminal_widget is not None:
                def _update_terminal():
                    try:
                        terminal = VistaDashboard._terminal_widget
                        if terminal and hasattr(terminal, 'insert'):
                            timestamp = __import__('datetime').datetime.now().strftime("%H:%M:%S")
                            formatted_msg = f"[{timestamp}] [{modulo}] [{nivel}] {mensaje}\n"
                            terminal.insert(tk.END, formatted_msg)
                            terminal.see(tk.END)
                    except Exception as e:
                        print(f"Error actualizando terminal: {e}")
                
                # Usar after_idle para asegurar ejecuci√≥n en el hilo principal
                self.after_idle(_update_terminal)
        except Exception as e:
            # Fallback a logging normal
            if hasattr(self, 'logger'):
                self.logger.info(f"[{modulo}] {mensaje}")
            print(f"Terminal log error: {e}")
    


