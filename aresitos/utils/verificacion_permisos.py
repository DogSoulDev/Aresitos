#!/usr/bin/env python3
"""
Script de Verificaci√≥n de Permisos para Ares Aegis
==================================================

Este script verifica que el gestor de permisos est√© funcionando
correctamente en Kali Linux y muestra un reporte detallado.

Autor: DogSoulDev
Fecha: 15 de Agosto de 2025
Versi√≥n: 1.0
"""

import sys
import os
import logging
from pathlib import Path

def configurar_logging():
    """Configurar logging para el script de verificaci√≥n."""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(sys.stdout),
            logging.FileHandler('verificacion_permisos.log')
        ]
    )
    return logging.getLogger(__name__)

def verificar_gestor_permisos():
    """Verificar que el gestor de permisos funciona correctamente."""
    logger = configurar_logging()
    
    logger.info("[SCAN] Iniciando verificacion del gestor de permisos...")
    
    try:
        # Importar el gestor de permisos
        from aresitos.utils.gestor_permisos import GestorPermisosSeguro
        
        logger.info("[OK] Gestor de permisos importado correctamente")
        
        # Crear instancia
        gestor = GestorPermisosSeguro(logger)
        
        # Generar reporte completo
        logger.info("[REPORT] Generando reporte de permisos...")
        reporte = gestor.generar_reporte_permisos()
        
        # Mostrar reporte
        print("\n" + "="*60)
        print("[SHIELD] REPORTE DE PERMISOS ARES AEGIS")
        print("="*60)
        
        print(f"\n[USER] Usuario actual: {reporte['usuario']}")
        print(f"üîë Es root: {'S√ç' if reporte['es_root'] else 'NO'}")
        print(f"‚ö° Sudo disponible: {'S√ç' if reporte['sudo_disponible'] else 'NO'}")
        
        print(f"\nüîß HERRAMIENTAS DE SEGURIDAD:")
        print("-" * 40)
        
        for herramienta, info in reporte['herramientas'].items():
            status_icon = "[OK]" if info['disponible'] and info['permisos_ok'] else "[ERROR]"
            sudo_text = " [SUDO]" if info.get('sudo_requerido', False) else ""
            
            print(f"{status_icon} {herramienta:<12} - {info['mensaje']}{sudo_text}")
            
            if info['disponible'] and info['path']:
                print(f"    üìÇ Ruta: {info['path']}")
        
        if reporte['recomendaciones']:
            print(f"\nüí° RECOMENDACIONES:")
            print("-" * 40)
            for i, rec in enumerate(reporte['recomendaciones'], 1):
                print(f"{i}. {rec}")
        
        # Realizar pruebas espec√≠ficas
        print(f"\nüß™ PRUEBAS DE FUNCIONALIDAD:")
        print("-" * 40)
        
        # Prueba 1: Verificar nmap
        if 'nmap' in reporte['herramientas'] and reporte['herramientas']['nmap']['disponible']:
            logger.info("üß™ Probando ejecuci√≥n de nmap...")
            exito, stdout, stderr = gestor.ejecutar_con_permisos('nmap', ['--version'])
            
            if exito:
                print("[OK] nmap ejecutado correctamente")
                version_line = stdout.split('\n')[0] if stdout else "Versi√≥n no detectada"
                print(f"    [INFO] {version_line}")
            else:
                print("[ERROR] Error ejecutando nmap")
                print(f"    üìã Error: {stderr}")
        
        # Prueba 2: Verificar netstat/ss
        herramientas_red = ['ss', 'netstat']
        for herramienta in herramientas_red:
            if herramienta in reporte['herramientas'] and reporte['herramientas'][herramienta]['disponible']:
                logger.info(f"üß™ Probando ejecuci√≥n de {herramienta}...")
                exito, stdout, stderr = gestor.ejecutar_con_permisos(herramienta, ['--help'])
                
                if exito:
                    print(f"‚úÖ {herramienta} ejecutado correctamente")
                else:
                    print(f"‚ùå Error ejecutando {herramienta}")
                    print(f"    üìã Error: {stderr}")
                break
        
        # Prueba 3: Verificar lectura de archivos del sistema
        archivos_sistema = ['/etc/passwd', '/etc/hosts']
        for archivo in archivos_sistema:
            if os.path.exists(archivo):
                logger.info(f"üß™ Probando lectura de {archivo}...")
                exito, contenido = gestor.leer_archivo_sistema(archivo)
                
                if exito:
                    lineas = len(contenido.split('\n'))
                    print(f"‚úÖ {archivo} le√≠do correctamente ({lineas} l√≠neas)")
                else:
                    print(f"‚ùå Error leyendo {archivo}")
                    print(f"    üìã Error: {contenido}")
                break
        
        print(f"\nüéØ ESTADO GENERAL:")
        print("-" * 40)
        
        herramientas_ok = sum(1 for info in reporte['herramientas'].values() 
                             if info['disponible'] and info['permisos_ok'])
        total_herramientas = len(reporte['herramientas'])
        
        if herramientas_ok == total_herramientas:
            print("üü¢ EXCELENTE: Todas las herramientas disponibles y funcionales")
        elif herramientas_ok >= total_herramientas * 0.7:
            print("üü° BUENO: La mayor√≠a de herramientas est√°n disponibles")
        else:
            print("üî¥ ATENCI√ìN: Muchas herramientas no est√°n disponibles")
        
        print(f"üìä Funcionalidad: {herramientas_ok}/{total_herramientas} herramientas OK")
        
        # Sugerencias finales
        print(f"\nüí¨ SUGERENCIAS:")
        print("-" * 40)
        
        if not reporte['es_root'] and not reporte['sudo_disponible']:
            print("üîß Para funcionamiento completo, ejecute:")
            print("   sudo python verificacion_permisos.py")
            print("   o configure sudo para su usuario")
        
        if herramientas_ok < total_herramientas:
            print("üîß Para instalar herramientas faltantes:")
            print("   sudo apt update && sudo apt install nmap netstat-nat net-tools")
        
        print(f"\n‚úÖ Verificaci√≥n completada")
        logger.info("‚úÖ Verificaci√≥n de permisos completada exitosamente")
        
        return True
        
    except ImportError as e:
        logger.error(f"‚ùå Error importando gestor de permisos: {e}")
        print("‚ùå Error: No se pudo importar el gestor de permisos")
        print("   Aseg√∫rese de que el m√≥dulo est√© correctamente instalado")
        return False
        
    except Exception as e:
        logger.error(f"‚ùå Error inesperado: {e}")
        print(f"‚ùå Error inesperado: {e}")
        return False

if __name__ == "__main__":
    print("üõ°Ô∏è Ares Aegis - Verificaci√≥n de Permisos")
    print("=" * 50)
    
    exito = verificar_gestor_permisos()
    
    print("\n" + "="*50)
    
    exit_code = 0 if exito else 1
    sys.exit(exit_code)
