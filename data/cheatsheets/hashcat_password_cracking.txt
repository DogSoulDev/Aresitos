# HASHCAT - ADVANCED PASSWORD RECOVERY TOOL

## Descripción
Hashcat es la herramienta de cracking de passwords más rápida y avanzada del mundo.
Soporta más de 300 tipos de hash y utiliza GPU para acelerar los ataques.
Es esencial para auditorías de contraseñas y análisis forense.

## Ejemplo Real
Durante una auditoría interna, obtuviste hashes NTLM del Active Directory.
Para crackear usando diccionario y reglas:
hashcat -m 1000 -a 0 hashes.txt /usr/share/wordlists/rockyou.txt -r rules/best64.rule

## Instalación y Configuración

# Verificar GPU y OpenCL
hashcat -I                            # Información de dispositivos
clinfo                                # Información OpenCL detallada

# Benchmark básico
hashcat -b                            # Benchmark de todos los algoritmos
hashcat -b -m 1000                    # Benchmark solo NTLM

# Actualización
hashcat --version                     # Versión actual
# Descargar desde https://hashcat.net/hashcat/

## Identificación de Hashes

# Herramientas de identificación
hashid hash_ejemplo                   # Identificar tipo de hash
hash-identifier                       # Herramienta interactiva
john --list=formats | grep -i md5     # Formatos soportados por John

# Hashes comunes y sus modos
# -m 0    = MD5
# -m 100  = SHA1
# -m 1400 = SHA2-256
# -m 1700 = SHA2-512
# -m 500  = md5crypt
# -m 1800 = sha512crypt
# -m 1000 = NTLM
# -m 3000 = LM
# -m 5600 = NetNTLMv2
# -m 2500 = WPA/WPA2 (deprecated, use 22000)
# -m 22000= WPA-PBKDF2-PMKID+EAPOL
# -m 1700 = SHA2-512
# -m 7500 = Kerberos 5 AS-REP etype 18
# -m 13100= Kerberos 5 TGS-REP etype 23

## Modos de Ataque

# Ataque de diccionario (-a 0)
hashcat -m 1000 -a 0 hashes.txt wordlist.txt

# Ataque combinatorio (-a 1)
hashcat -m 1000 -a 1 hashes.txt wordlist1.txt wordlist2.txt

# Ataque por máscara/brute force (-a 3)
hashcat -m 1000 -a 3 hashes.txt ?d?d?d?d?d?d?d?d

# Ataque híbrido diccionario + máscara (-a 6)
hashcat -m 1000 -a 6 hashes.txt wordlist.txt ?d?d?d

# Ataque híbrido máscara + diccionario (-a 7)
hashcat -m 1000 -a 7 hashes.txt ?d?d?d wordlist.txt

## Configuración de Máscaras

# Caracteres de máscara
?l = abcdefghijklmnopqrstuvwxyz           # Minúsculas
?u = ABCDEFGHIJKLMNOPQRSTUVWXYZ           # Mayúsculas
?d = 0123456789                          # Dígitos
?h = 0123456789abcdef                     # Hexadecimal minúsculas
?H = 0123456789ABCDEF                     # Hexadecimal mayúsculas
?s = !"#$%&'()*+,-./:;<=>?@[\]^_`{|}~    # Símbolos
?a = ?l?u?d?s                            # Todos los caracteres

# Ejemplos de máscaras comunes
?d?d?d?d?d?d?d?d                         # 8 dígitos
?l?l?l?l?d?d?d?d                         # 4 letras + 4 números
?u?l?l?l?l?l?d?d                         # Mayúscula + 5 minúsculas + 2 dígitos
?d?d/?d?d/?d?d?d?d                       # Fecha DD/MM/YYYY

# Máscaras personalizadas
-1 ?l?d                                  # Custom charset 1: letras + números
-1 ?l?u?d -2 ?l?u                        # Dos charsets personalizados
hashcat -m 1000 -a 3 hashes.txt -1 ?l?d?u ?1?1?1?1?1?1?1?1

## Reglas de Transformación

# Usar reglas predefinidas
hashcat -m 1000 -a 0 hashes.txt wordlist.txt -r rules/best64.rule
hashcat -m 1000 -a 0 hashes.txt wordlist.txt -r rules/d3ad0ne.rule
hashcat -m 1000 -a 0 hashes.txt wordlist.txt -r rules/T0XlC.rule

# Múltiples archivos de reglas
hashcat -m 1000 -a 0 hashes.txt wordlist.txt -r rules/best64.rule -r rules/toggles1.rule

# Reglas personalizadas básicas
:                                        # Sin cambios
l                                        # Todo minúsculas
u                                        # Todo mayúsculas
c                                        # Capitalize (primera mayúscula)
t                                        # Toggle case
r                                        # Reverse
$1 $2 $3                                # Append 123
^1 ^2 ^3                                # Prepend 321
sa@                                      # Substitute a with @
se3                                      # Substitute e with 3

# Crear archivo de reglas personalizado
echo '$!' > mi_regla.rule               # Agregar ! al final
echo '$@' >> mi_regla.rule              # Agregar @ al final
echo '$1 $2 $3' >> mi_regla.rule        # Agregar 123 al final
hashcat -m 1000 -a 0 hashes.txt wordlist.txt -r mi_regla.rule

## Wordlists y Diccionarios

# Wordlists comunes de Kali Linux
/usr/share/wordlists/rockyou.txt         # Más popular
/usr/share/wordlists/fasttrack.txt       # Passwords comunes
/usr/share/wordlists/dirb/common.txt     # Directorios/passwords básicos

# SecLists - Colección especializada
/usr/share/seclists/Passwords/Common-Credentials/
/usr/share/seclists/Passwords/Leaked-Databases/
/usr/share/seclists/Passwords/darkweb2017-top10000.txt

# Generar wordlists personalizadas
crunch 6 6 -t pass@@ -o passwords6.txt  # Generar con crunch
cupp -i                                  # Common User Passwords Profiler
cewl http://company.com -w company_words.txt # Web scraping

# Combinar wordlists
cat wordlist1.txt wordlist2.txt | sort -u > combined.txt

## Optimización y Performance

# Configuraciones de performance
hashcat -m 1000 -a 0 hashes.txt wordlist.txt -O    # Optimized kernel
hashcat -m 1000 -a 0 hashes.txt wordlist.txt -w 3  # Workload profile alto
hashcat -m 1000 -a 0 hashes.txt wordlist.txt -T 32 # Número de threads

# Workload profiles
-w 1                                     # Low (2ms)
-w 2                                     # Default (12ms)
-w 3                                     # High (96ms)
-w 4                                     # Nightmare (480ms)

# Limitar GPU/CPU usage
hashcat -m 1000 -a 0 hashes.txt wordlist.txt -d 1,2  # Solo GPU 1 y 2
hashcat -m 1000 -a 0 hashes.txt wordlist.txt --gpu-temp-abort=90

## Sesiones y Recuperación

# Crear sesión
hashcat -m 1000 -a 0 hashes.txt wordlist.txt --session=mi_sesion

# Recuperar sesión
hashcat --restore --session=mi_sesion

# Checkpoint automático
hashcat -m 1000 -a 0 hashes.txt wordlist.txt --checkpoint-disable
hashcat -m 1000 -a 0 hashes.txt wordlist.txt --checkpoint-interval=60

# Mostrar progreso
hashcat -m 1000 -a 0 hashes.txt wordlist.txt --status --status-timer=10

## Casos de Uso Específicos

# Windows NTLM hashes
hashcat -m 1000 -a 0 ntlm_hashes.txt /usr/share/wordlists/rockyou.txt

# Linux shadow hashes (SHA-512)
hashcat -m 1800 -a 0 shadow_hashes.txt wordlist.txt

# WPA/WPA2 handshakes (formato 22000)
hashcat -m 22000 -a 0 handshake.22000 wordlist.txt

# MySQL hashes
hashcat -m 300 -a 0 mysql_hashes.txt wordlist.txt

# MD5 web application hashes
hashcat -m 0 -a 0 md5_hashes.txt wordlist.txt -r rules/best64.rule

# Kerberos AS-REP roasting
hashcat -m 18200 -a 0 asrep_hashes.txt wordlist.txt

# Kerberos Kerberoasting
hashcat -m 13100 -a 0 kerberos_hashes.txt wordlist.txt

## Formatos de Hash Específicos

# Active Directory
# NTLM: hashcat -m 1000
# NetNTLMv2: hashcat -m 5600
# Kerberos: hashcat -m 7500, -m 13100, -m 18200

# Web Applications
# MD5: hashcat -m 0
# SHA1: hashcat -m 100
# SHA256: hashcat -m 1400
# bcrypt: hashcat -m 3200

# Databases
# MySQL: hashcat -m 300
# PostgreSQL: hashcat -m 12
# Oracle: hashcat -m 3100
# MSSQL: hashcat -m 131

# WiFi
# WPA/WPA2: hashcat -m 22000
# WEP: No soportado (usar aircrack-ng)

## Scripts de Automatización

# Bash script para múltiples ataques
#!/bin/bash
HASH_FILE="hashes.txt"
HASH_MODE="1000"  # NTLM

echo "=== Ataque con rockyou.txt ==="
hashcat -m $HASH_MODE -a 0 $HASH_FILE /usr/share/wordlists/rockyou.txt

echo "=== Ataque con reglas ==="
hashcat -m $HASH_MODE -a 0 $HASH_FILE /usr/share/wordlists/rockyou.txt -r rules/best64.rule

echo "=== Ataque por máscara (8 dígitos) ==="
hashcat -m $HASH_MODE -a 3 $HASH_FILE ?d?d?d?d?d?d?d?d

echo "=== Ataque híbrido ==="
hashcat -m $HASH_MODE -a 6 $HASH_FILE /usr/share/wordlists/fasttrack.txt ?d?d?d

# Python script para análisis de resultados
#!/usr/bin/env python3
import subprocess
import sys

def run_hashcat(mode, hash_file, attack_type, extra_args=""):
    cmd = f"hashcat -m {mode} -a {attack_type} {hash_file} {extra_args} --potfile-disable --quiet"
    
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True, timeout=3600)
        return result.returncode, result.stdout, result.stderr
    except subprocess.TimeoutExpired:
        return -1, "", "Timeout"

def main():
    if len(sys.argv) != 3:
        print("Uso: python3 hashcat_auto.py <hash_mode> <hash_file>")
        sys.exit(1)
    
    hash_mode = sys.argv[1]
    hash_file = sys.argv[2]
    
    attacks = [
        ("0", "/usr/share/wordlists/fasttrack.txt", "FastTrack wordlist"),
        ("0", "/usr/share/wordlists/rockyou.txt", "RockYou wordlist"),
        ("3", "?d?d?d?d?d?d?d?d", "8-digit brute force"),
        ("6", "/usr/share/wordlists/fasttrack.txt ?d?d?d", "Hybrid attack")
    ]
    
    for attack_type, params, description in attacks:
        print(f"Ejecutando: {description}")
        returncode, stdout, stderr = run_hashcat(hash_mode, hash_file, attack_type, params)
        
        if returncode == 0:
            print(f"  ✓ Completado exitosamente")
            if "Cracked" in stdout:
                print(f"  ¡Hashes crackeados encontrados!")
        else:
            print(f"  ✗ Error o timeout")

if __name__ == "__main__":
    main()

## Análisis de Resultados

# Ver passwords crackeados
hashcat -m 1000 hashes.txt --show

# Guardar solo passwords crackeados
hashcat -m 1000 hashes.txt --show --outfile=cracked.txt

# Formato de salida personalizado
hashcat -m 1000 hashes.txt --show --outfile-format=2  # hash:password
hashcat -m 1000 hashes.txt --show --outfile-format=3  # hash

# Estadísticas de sesión
hashcat -m 1000 hashes.txt --show --username  # Si hay usernames

# Filtrar por longitud de password
hashcat -m 1000 hashes.txt --show | awk -F: 'length($2) >= 8'

## Potfile Management

# Ubicación del potfile por defecto
~/.local/share/hashcat/hashcat.potfile

# Usar potfile personalizado
hashcat -m 1000 -a 0 hashes.txt wordlist.txt --potfile-path=mi_potfile.pot

# Deshabilitar potfile (para testing)
hashcat -m 1000 -a 0 hashes.txt wordlist.txt --potfile-disable

# Limpiar potfile
rm ~/.local/share/hashcat/hashcat.potfile

## Integración con Otras Herramientas

# Con John the Ripper
john --format=nt --wordlist=wordlist.txt hashes.txt
john --show --format=nt hashes.txt > john_results.txt
# Convertir formato John a Hashcat si es necesario

# Con Hydra (para hashes online)
hydra -L users.txt -P passwords.txt protocol://target

# Con Medusa
medusa -h target -U users.txt -P passwords.txt -M protocol

# Con hashcat-utils para manipulación
/usr/share/hashcat-utils/combinator.bin wordlist1.txt wordlist2.txt
/usr/share/hashcat-utils/maskprocessor.bin ?d?d?d?d?d?d?d?d

## Troubleshooting Común

# Error: "No devices found/left"
# Instalar drivers de GPU adecuados
# Verificar OpenCL: clinfo

# Error: "Insufficient memory"
# Reducir workload: -w 1
# Usar -O para optimized kernels

# Performance lenta
# Verificar temperatura: --gpu-temp-abort=85
# Ajustar workload: -w 3 o -w 4
# Usar múltiples GPUs: -d 1,2,3

# Hash no reconocido
# Verificar formato con hashid
# Consultar documentación de modos
# Usar --example-hashes para ver formatos

## Consideraciones de Seguridad

# Para administradores
1. Usar hashcat para validar políticas de contraseñas
2. Realizar auditorías regulares de hashes
3. Implementar contraseñas de al menos 12 caracteres
4. Usar algoritmos robustos (bcrypt, Argon2)
5. Implementar salts únicos por hash
6. Monitorear intentos de cracking en logs

# Para pentesters
1. Solo usar en sistemas autorizados
2. Proteger archivos de hash obtenidos
3. Documentar metodología de cracking
4. Borrar archivos temporales después del test
5. Reportar debilidades encontradas constructivamente

## Recursos y Referencias

# Documentación oficial
https://hashcat.net/hashcat/
https://github.com/hashcat/hashcat

# Wordlists adicionales
https://github.com/danielmiessler/SecLists
https://github.com/berzerk0/Probable-Wordlists
https://weakpass.com/

# Reglas personalizadas
https://github.com/NotSoSecure/password_cracking_rules
https://github.com/praetorian-inc/Hob0Rules

# Benchmarks y comparativas
https://gist.github.com/epixoip/a83d38f412b4737e99bbef804a270c40
