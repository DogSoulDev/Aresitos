# NIKTO - WEB VULNERABILITY SCANNER

## Descripción
Nikto es un escáner de vulnerabilidades web que examina servidores web en busca
de archivos peligrosos, configuraciones incorrectas, versiones desactualizadas
y otros problemas de seguridad. Incluye una base de datos de más de 6700 items.

## Ejemplo Real
Durante un pentest web, encuentras el sitio https://tienda-online.com
Para hacer un escaneo inicial de vulnerabilidades:
nikto -h https://tienda-online.com -output scan_tienda.txt

## Comandos Básicos

# Escaneo básico
nikto -h http://target.com

# Escaneo HTTPS
nikto -h https://target.com

# Puerto específico
nikto -h http://target.com -p 8080

# Múltiples puertos
nikto -h http://target.com -p 80,443,8080

# Rango de puertos
nikto -h http://target.com -p 80-8080

# Desde archivo de hosts
nikto -h targets.txt

# Con proxy (Burp Suite)
nikto -h http://target.com -useproxy http://127.0.0.1:8080

## Opciones de Escaneo

# Usar SSL/TLS
nikto -h target.com -ssl

# Forzar SSL en puerto específico
nikto -h target.com -p 443 -ssl

# No verificar certificados SSL
nikto -h https://target.com -nossl

# Timeout personalizado
nikto -h http://target.com -timeout 10

# Seguir redirecciones
nikto -h http://target.com -followredirects

# Número máximo de redirecciones
nikto -h http://target.com -maxredirs 5

# User-Agent personalizado
nikto -h http://target.com -useragent "Mozilla/5.0 Custom Scanner"

# Host virtual
nikto -h 192.168.1.100 -vhost www.target.com

## Autenticación

# Autenticación básica HTTP
nikto -h http://target.com -id admin:password

# Cookies de autenticación
nikto -h http://target.com -cookie "PHPSESSID=abc123; auth=token"

# Headers personalizados
nikto -h http://target.com -header "X-API-Key: secretkey"

## Tipos de Escaneo (Tuning)

# Solo buscar archivos peligrosos
nikto -h http://target.com -Tuning 2

# Solo identificación de software
nikto -h http://target.com -Tuning 3

# Solo configuraciones incorrectas
nikto -h http://target.com -Tuning 4

# Solo inyección SQL
nikto -h http://target.com -Tuning 9

# Múltiples tipos
nikto -h http://target.com -Tuning 1,2,3,4

# Lista completa de tuning
0 - File Upload                    # Carga de archivos
1 - Interesting File / Seen in logs # Archivos interesantes
2 - Misconfiguration / Default File # Configuraciones por defecto
3 - Information Disclosure         # Divulgación de información
4 - Injection (XSS/Script/HTML)    # Inyecciones
5 - Remote File Retrieval - Inside Web Root # RFI dentro del web root
6 - Denial of Service              # Denegación de servicio
7 - Remote File Retrieval - Server Wide # RFI a nivel servidor
8 - Command Execution / Remote Shell # Ejecución de comandos
9 - SQL Injection                  # Inyección SQL
a - Authentication Bypass          # Bypass de autenticación
b - Software Identification        # Identificación de software
c - Remote Source Inclusion        # Inclusión de código remoto
x - Reverse Tuning Options         # Opciones inversas

## Salida y Reportes

# Guardar en archivo
nikto -h http://target.com -output scan_results.txt

# Formato HTML
nikto -h http://target.com -Format html -output report.html

# Formato XML
nikto -h http://target.com -Format xml -output scan.xml

# Formato CSV
nikto -h http://target.com -Format csv -output data.csv

# Múltiples formatos
nikto -h http://target.com -Format txt,html -output scan

# Solo mostrar positivos
nikto -h http://target.com -Display P

# Mostrar todo (verbose)
nikto -h http://target.com -Display V

# Mostrar errores
nikto -h http://target.com -Display E

## Opciones Avanzadas

# Especificar directorio raíz
nikto -h http://target.com -root /app/

# CGI directory
nikto -h http://target.com -Cgidirs /cgi-bin/,/scripts/

# Evadir IDS/IPS
nikto -h http://target.com -evasion 1

# Técnicas de evasión disponibles
1 - Random URI encoding (non-UTF8)
2 - Directory self-reference (/./)
3 - Premature URL ending
4 - Prepend long random string
5 - Fake parameter
6 - TAB as request spacer
7 - Change the case of the URL
8 - Use Windows directory separator (\)

# Múltiples técnicas de evasión
nikto -h http://target.com -evasion 1,2,7

# Mutación de paths
nikto -h http://target.com -mutate 1,2,3

# Opciones de mutación
1 - Test all files with all root directories
2 - Guess for password file names
3 - Enumerate user names via Apache (/~user type requests)
4 - Enumerate user names via cgiwrap (/cgi-bin/cgiwrap/~user type requests)
5 - Attempt to brute force sub-domain names
6 - Attempt to guess directory names from the supplied dictionary file

## Casos Prácticos de Pentesting

# Escenario 1: Aplicación web corporativa
nikto -h https://app.company.com -Tuning 1,2,3,b -Format html -output corporate_scan.html

# Escenario 2: Múltiples subdominios
nikto -h subdomains.txt -ssl -Tuning 2,3,4,9 -output multi_scan.txt

# Escenario 3: API endpoints
nikto -h https://api.company.com -header "Accept: application/json" -Tuning 3,4,9

# Escenario 4: Aplicación con autenticación
nikto -h http://protected.company.com -cookie "session=abc123" -Tuning 1,2,3,4

# Escenario 5: Bypass WAF
nikto -h http://protected.company.com -evasion 1,2,7 -useragent "Mozilla/5.0 (compatible; Googlebot/2.1)"

# Escenario 6: Red interna
nikto -h 192.168.1.0/24 -p 80,443,8080 -timeout 5

## Plugins Específicos

# Usar plugin específico
nikto -h http://target.com -Plugins tests

# Listar plugins disponibles
nikto -list-plugins

# Plugins útiles
nikto -h http://target.com -Plugins dictionary    # Ataques de diccionario
nikto -h http://target.com -Plugins headers       # Análisis de headers
nikto -h http://target.com -Plugins robots        # Análisis de robots.txt
nikto -h http://target.com -Plugins outdated      # Software desactualizado

## Integración con Otras Herramientas

# Con Nmap para descubrimiento
nmap -sS -O -sV -p 80,443 target.com
nikto -h http://target.com -p 80,443

# Con dirb/gobuster para directorios
dirb http://target.com /usr/share/wordlists/dirb/common.txt
nikto -h http://target.com -root /found_directory/

# Con sqlmap para inyecciones
nikto -h http://target.com -Tuning 9 | grep -i sql
sqlmap -u "http://target.com/vulnerable_page.php?id=1"

# Con Burp Suite
nikto -h http://target.com -useproxy http://127.0.0.1:8080

## Scripts de Automatización

# Bash script para múltiples objetivos
#!/bin/bash
TARGETS="targets.txt"

while read target; do
    echo "Scanning: $target"
    nikto -h "$target" -Tuning 1,2,3,4,9 -Format txt -output "nikto_$(echo $target | tr '/' '_').txt"
    sleep 5  # Pausa entre escaneos
done < "$TARGETS"

# Python script para análisis automatizado
#!/usr/bin/env python3
import subprocess
import sys
import re

def run_nikto(target, tuning="1,2,3,4", output_format="txt"):
    cmd = [
        "nikto",
        "-h", target,
        "-Tuning", tuning,
        "-Format", output_format
    ]
    
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=600)
        return result.stdout
    except subprocess.TimeoutExpired:
        return "Timeout occurred"
    except Exception as e:
        return f"Error: {e}"

def parse_results(nikto_output):
    vulnerabilities = []
    
    # Buscar líneas con + (vulnerabilidades encontradas)
    for line in nikto_output.split('\n'):
        if line.startswith('+'):
            vulnerabilities.append(line)
    
    return vulnerabilities

# Lista de objetivos
targets = [
    "http://target1.com",
    "https://target2.com",
    "http://target3.com:8080"
]

for target in targets:
    print(f"Scanning {target}...")
    results = run_nikto(target)
    vulnerabilities = parse_results(results)
    
    print(f"Found {len(vulnerabilities)} potential issues:")
    for vuln in vulnerabilities[:5]:  # Mostrar primeras 5
        print(f"  {vuln}")
    
    print("-" * 50)

## Análisis de Resultados

# Filtrar vulnerabilidades críticas
grep -E "(SQL|XSS|Command|Upload|Directory)" nikto_results.txt

# Buscar información sensible
grep -i "config\|backup\|database\|password\|admin" nikto_results.txt

# Extraer URLs vulnerables
grep "^+" nikto_results.txt | awk '{print $2}' | sort -u

# Contar tipos de vulnerabilidades
grep "^+" nikto_results.txt | cut -d':' -f2 | sort | uniq -c | sort -nr

## Configuración Personalizada

# Archivo de configuración ~/.nikto/nikto.conf
PROXYHOST=127.0.0.1
PROXYPORT=8080
USERAGENT=Mozilla/5.0 (compatible; Nikto/2.1.6)
TIMEOUT=10

# Base de datos personalizada
nikto -update  # Actualizar base de datos

# Crear base de datos personalizada
# Editar /usr/share/nikto/databases/db_tests

## Filtros y Exclusiones

# Ignorar ciertos códigos de respuesta
nikto -h http://target.com -IgnoreCode 404,403

# Solo buscar en paths específicos
nikto -h http://target.com -root /admin/,/manager/

# Excluir plugins
nikto -h http://target.com -noplugins outdated

## Técnicas de Bypass WAF

# Combinación efectiva contra WAF
nikto -h http://target.com \
  -evasion 1,2,7 \
  -useragent "Mozilla/5.0 (compatible; Googlebot/2.1)" \
  -timeout 15 \
  -header "X-Originating-IP: 127.0.0.1"

# Rotación de User-Agents
for ua in "Googlebot" "Bingbot" "YandexBot"; do
    nikto -h http://target.com -useragent "$ua" -Tuning 2,3
done

## Correlación con Logs

# Monitorear logs durante escaneo
tail -f /var/log/apache2/access.log | grep nikto

# Buscar patrones de Nikto en logs
grep -E "(nikto|Mozilla/4\.0.*compatible)" /var/log/apache2/access.log

## Mejores Prácticas

# Para auditorías profesionales
1. Siempre usar -Tuning específico según objetivos
2. Guardar resultados en múltiples formatos
3. Coordinar con administradores para evitar interrupciones
4. Usar proxy para analizar requests
5. Verificar falsos positivos manualmente

# Para red teaming
1. Usar técnicas de evasión apropriadas
2. Rotar User-Agents y técnicas
3. Implementar delays para evitar detección
4. Combinar con reconocimiento manual
5. Correlacionar hallazgos con otras herramientas

## Limitaciones y Consideraciones

# Falsos positivos comunes
- Archivos que existen pero no son vulnerables
- Detecciones basadas solo en respuestas HTTP
- Versiones de software incorrectamente identificadas

# Cosas que Nikto NO hace
- Explotación automática de vulnerabilidades
- Análisis profundo de lógica de aplicación
- Testing de autenticación complejo
- Análisis de JavaScript dinámico

## Contramedidas y Defensa

# Detectar escaneos de Nikto
grep -i nikto /var/log/apache2/access.log
fail2ban filter para patrones de Nikto

# Configuraciones para minimizar superficie de ataque
- Ocultar versiones de servidor
- Configurar headers de seguridad
- Remover archivos y directorios por defecto
- Implementar rate limiting

## Notas de Legalidad y Ética
- Solo usar en sistemas autorizados
- Respetar robots.txt en auditorías éticas
- Documentar todos los hallazgos
- Coordinar con equipos de infraestructura
- No causar interrupciones en producción
