# MEMSTAT - ANÁLISIS DE MEMORIA Y PROCESOS
# ======================================
# Herramienta nativa de Kali Linux para análisis de memoria
# Incluida en el paquete procps (instalado por defecto)

## COMANDOS BÁSICOS

# Ver estadísticas de memoria general
memstat

# Ver memoria con detalles
memstat -v

# Análisis continuo cada 2 segundos
memstat 2

# Mostrar información de swap
memstat -s

## ANÁLISIS DE PROCESOS EN MEMORIA

# Procesos activos en memoria (top alternativo)
ps aux --sort=-%mem | head -20

# Memoria por proceso específico
ps -o pid,vsz,rss,comm -p [PID]

# Procesos ordenados por uso de memoria
ps aux --sort=-rss

# Ver mapas de memoria de un proceso
cat /proc/[PID]/maps

# Información detallada de memoria de proceso
cat /proc/[PID]/status | grep -i mem

# Estadísticas de memoria global
cat /proc/meminfo

## ANÁLISIS DE MEMORIA COMPARTIDA

# Memoria compartida del sistema
ipcs -m

# Semáforos del sistema
ipcs -s

# Colas de mensajes
ipcs -q

## ANÁLISIS CON HERRAMIENTAS COMPLEMENTARIAS

# Strings en memoria de proceso activo
strings /proc/[PID]/mem

# Hexdump de memoria de proceso
hexdump -C /proc/[PID]/mem | head -50

# Análisis de archivos mapeados
lsof -p [PID]

# Ver archivos abiertos por todos los procesos
lsof | grep mem

## MONITOREO EN TIEMPO REAL

# Monitor de memoria con htop
htop

# Monitor de memoria con free
free -h

# Monitor continuo de memoria
watch -n 1 free -h

# Información de memoria virtual
vmstat 1

# I/O de memoria
iostat 1

## ANÁLISIS FORENSE BÁSICO

# Buscar strings específicos en memoria
strings /proc/[PID]/mem | grep -i password

# Buscar patrones en memoria
grep -a "patrón" /proc/[PID]/mem

# Análisis de core dumps
strings core.[PID] | grep -i sensitive

# Ver threads de un proceso
ps -eLf | grep [PID]

## DETECCIÓN DE ANOMALÍAS

# Procesos con alto uso de memoria
ps aux | awk '{print $6, $11}' | sort -n | tail -20

# Procesos sin TTY (posibles backdoors)
ps aux | grep -v pts | grep -v tty

# Procesos con nombres sospechosos
ps aux | grep -E '\[.*\]'

# Conexiones de red de procesos
lsof -i | grep [PID]

## ANÁLISIS DE DUMPS

# Crear dump de memoria de proceso
gcore [PID]

# Analizar core dump
strings core.[PID] | less

# Buscar direcciones de memoria
hexdump -C core.[PID] | grep [patrón]

## COMBINACIÓN CON OTRAS HERRAMIENTAS

# Con binwalk para análisis de estructuras
binwalk /proc/[PID]/mem

# Con file para identificar tipos
file /proc/[PID]/exe

# Con ltrace para llamadas de librería
ltrace -p [PID]

# Con strace para llamadas de sistema
strace -p [PID]

## SCRIPTING Y AUTOMATIZACIÓN

# Script para monitoreo de memoria
#!/bin/bash
while true; do
    echo "$(date): $(free -h | grep Mem)"
    sleep 60
done

# Buscar procesos con alta memoria
ps aux --sort=-rss | head -10 | awk '{print $2, $4, $11}'

# Alertas de memoria baja
#!/bin/bash
MEM_THRESHOLD=90
MEM_USAGE=$(free | grep Mem | awk '{printf "%.0f", $3/$2 * 100.0}')
if [ $MEM_USAGE -gt $MEM_THRESHOLD ]; then
    echo "ALERTA: Uso de memoria alto: ${MEM_USAGE}%"
fi

## INTEGRACIÓN CON ARESITOS

# Análisis de memoria para FIM
memstat | grep -E '(swap|buffer|cache)'

# Detección de procesos sospechosos para SIEM
ps aux | awk '$3 > 50.0 {print "HIGH_CPU:", $2, $11}'
ps aux | awk '$4 > 20.0 {print "HIGH_MEM:", $2, $11}'

# Monitoreo continuo para auditoría
watch -n 30 'ps aux --sort=-rss | head -20'

## NOTAS IMPORTANTES

# - memstat es parte de procps (instalado por defecto en Kali)
# - Para análisis profundo combinar con /proc filesystem
# - Usar hexdump y strings para análisis de contenido
# - Complementar con herramientas como htop, top, vmstat
# - Para forense real usar dd para volcados completos

## ALTERNATIVAS Y HERRAMIENTAS RELACIONADAS

# smem - Reporte detallado de memoria
smem -p

# pmap - Mapa de memoria de proceso
pmap [PID]

# valgrind - Análisis de memoria para debugging
valgrind --tool=memcheck programa

# /proc/kcore - Imagen de memoria del kernel (solo root)
strings /proc/kcore | grep -i pattern

## EJEMPLOS PRÁCTICOS

# Encontrar proceso que consume más memoria
ps aux --sort=-rss | head -1

# Analizar memoria de apache
ps aux | grep apache | awk '{print $2}' | xargs -I {} cat /proc/{}/status | grep VmRSS

# Buscar cadenas sensibles en memoria
for pid in $(ps aux | grep firefox | awk '{print $2}'); do
    strings /proc/$pid/mem 2>/dev/null | grep -i password
done

# Monitoreo de leaks de memoria
#!/bin/bash
PROCESS="apache2"
while true; do
    MEM=$(ps aux | grep $PROCESS | grep -v grep | awk '{sum+=$6} END {print sum}')
    echo "$(date): $PROCESS using ${MEM}KB"
    sleep 300
done
